---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'AWS CloudFormation Template to create AWS resources to deploy simple sinatra app.'

Parameters: 
  ImageId: 
    Description: as the name
    Type: String
    Default: ami-0b8b10b5bf11f3a22 
  KeyName: 
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    Default: rea-sinatra 
  InstanceType: 
    Description: as the name
    Type: String
    Default: t3.nano 
  SSHLocation: 
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: "203.221.39.155/32"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    
Resources:
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: rea-test
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: rea-test
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref Vpc
      CidrBlock: '10.0.10.0/24'
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: rea-test
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags: 
        - Key: Name
          Value: rea-test
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1
  Ec2:
    Type: AWS::EC2::Instance
    Properties: 
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      SubnetId: !Ref PublicSubnetAZ1
      SecurityGroupIds:  
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          amazon-linux-extras install docker
          service docker start
          docker run -d --rm --name sinatra -p 80:9292 fen9li/sinatra-test:v1.0.0
      Tags: 
        - Key: Name
          Value: rea-test
  InstanceSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Access to EC2 instance
      VpcId: !Ref Vpc
      Tags: 
        - Key: Name
          Value: rea-test
  InstanceSecurityGroupIngressFromSSHLocation:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from SSHLocation
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
      Tags: 
        - Key: Name
          Value: rea-test
  InstanceSecurityGroupIngressFromPublic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress for http
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
      Tags: 
        - Key: Name
          Value: rea-test
 
Outputs:
  PublicIp:
    Description: public ip address of this ec2 instance
    Value: !GetAtt Ec2.PublicIp
